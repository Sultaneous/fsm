# URLE- expands an rle compressed file.
import os
import sys
argv=sys.argv
argc=(len(argv))

# Global
config = dict()

def expandFile():
   infile=open(config["infile"], "rb")
   outfile=open(config["outfile"], "wb+")
   while not eof(infile):
      run=int.from_bytes(infile.read(1), "big")
      b=infile.read(1)
      for i in range(run):
         outfile.write(b)
   infile.close()
   outfile.close()

   
def showSyntax():
   s='''
URLE -> Un-Run Length Encode
August 2021 Karim Sultan

Syntax: unrle.py <infile> [outfile]

Outfile is optional, otherwise uses infile.ext from infile.ext.rle format.
Decodes RLE files generated by fsmrle.py.
'''
   print(s)
   exit()

def doHouseKeeping():
   if argc>=2:
      config["infile"]=argv[1]

   if argc==3:
      config["outfile"]=argv[2]
   else:
      outfile,e=os.path.splitext(config["infile"])
      config["outfile"]=outfile
   print(config)
   # Quick parity check / RLEs can't have odd byte file size
   if (os.path.getsize(config["infile"]) %2 ==1):
      print (f"{config['infile']} is not a valid RLE file.")
      exit()

# Detects EOF.  Python should have this built in.
def eof(f):
   cur = f.tell()    # save current position
   f.seek(0, os.SEEK_END)
   end = f.tell()    # find the size of file
   f.seek(cur, os.SEEK_SET)
   return cur == end

def main():
   if (argc<2):
      showSyntax()

   doHouseKeeping()
   expandFile()

   print("Done!")
   
if __name__=="__main__":
   main()
   
